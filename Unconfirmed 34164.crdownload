# -*- coding: utf-8 -*-
"""untitled0.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/gist/omnia672/251015e14bac6a965916d6a75994af25/untitled0.ipynb
"""

import tensorflow as tf
from tensorflow import keras
from tensorflow.keras import layers
import numpy as np

# تحميل بيانات CIFAR-10
(x_train, y_train), (x_test, y_test) = keras.datasets.cifar10.load_data()

# تطبيع البيانات لتكون القيم بين 0 و 1
x_train, x_test = x_train / 255.0, x_test / 255.0

# تحويل التصنيفات إلى One-hot encoding
y_train = keras.utils.to_categorical(y_train, 10)
y_test = keras.utils.to_categorical(y_test, 10)

# تحميل نموذج ResNet50 بدون الطبقات النهائية
base_model = keras.applications.ResNet50(weights='imagenet', include_top=False, input_shape=(32, 32, 3))
base_model.trainable = False  # تجميد الطبقات الأساسية

# إضافة طبقات مخصصة
model = keras.Sequential([
    base_model,
    layers.GlobalAveragePooling2D(),
    layers.Dense(256, activation='relu'),
    layers.Dropout(0.5),
    layers.Dense(10, activation='softmax')  # 10 فئات لبيانات CIFAR-10
])

# تجميع النموذج
model.compile(optimizer='adam', loss='categorical_crossentropy', metrics=['accuracy'])

# تدريب النموذج
model.fit(x_train, y_train, validation_data=(x_test, y_test), epochs=5, batch_size=32)

# فك تجميد بعض الطبقات وإعادة التدريب
base_model.trainable = True
model.compile(optimizer=keras.optimizers.Adam(1e-5), loss='categorical_crossentropy', metrics=['accuracy'])
model.fit(x_train, y_train, validation_data=(x_test, y_test), epochs=5, batch_size=32)

# تقييم النموذج على بيانات الاختبار
test_loss, test_acc = model.evaluate(x_test, y_test, verbose=2)
print(f"Test accuracy: {test_acc:.4f}")

# حفظ النموذج بصيغة HDF5
model.save("cifar10_resnet50.h5")
print("Model saved successfully!")

import numpy as np
import matplotlib.pyplot as plt
from tensorflow import keras

# تحميل النموذج المحفوظ (إذا لم يكن محملًا بالفعل)
loaded_model = keras.models.load_model("cifar10_resnet50.h5")

# اختيار صورة عشوائية من بيانات الاختبار
idx = np.random.randint(0, len(x_test))
sample_image = x_test[idx]
sample_label = np.argmax(y_test[idx]) if y_test.ndim > 1 else y_test[idx]  # التصنيف الحقيقي

# عرض الصورة
plt.imshow(sample_image)
plt.title(f"True Label: {sample_label}")
plt.axis('off')
plt.show()

# توسيع الأبعاد لتتناسب مع إدخال النموذج
sample_image = np.expand_dims(sample_image, axis=0)

# التنبؤ بالفئة
prediction = loaded_model.predict(sample_image)
predicted_label = np.argmax(prediction)

print(f"True Label: {sample_label}")
print(f"Predicted Label: {predicted_label}")

import matplotlib.pyplot as plt

# تدريب النموذج مع حفظ السجل
history = model.fit(x_train, y_train, validation_data=(x_test, y_test), epochs=5, batch_size=32)

# رسم منحنيات الأداء
plt.figure(figsize=(12, 5))

# رسم الدقة
plt.subplot(1, 2, 1)
plt.plot(history.history['accuracy'], label='Train Accuracy')
plt.plot(history.history['val_accuracy'], label='Validation Accuracy')
plt.xlabel('Epochs')
plt.ylabel('Accuracy')
plt.title('Training & Validation Accuracy')
plt.legend()

# رسم الخسارة
plt.subplot(1, 2, 2)
plt.plot(history.history['loss'], label='Train Loss')
plt.plot(history.history['val_loss'], label='Validation Loss')
plt.xlabel('Epochs')
plt.ylabel('Loss')
plt.title('Training & Validation Loss')
plt.legend()

plt.show()